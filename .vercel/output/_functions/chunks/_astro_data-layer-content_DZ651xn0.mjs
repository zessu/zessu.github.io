const _astro_dataLayerContent = [["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.4.1","content-config-digest","bf47ab69d45429a5","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://drew.is-a.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true,\"defaultStrategy\":\"load\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"synthwave-84\",\"dark\":\"dracula\"},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,40,41,57,58,74,75,95,96],"typography",{id:11,data:13,body:17,filePath:18,digest:19,rendered:20},{title:14,description:15,pubDate:16},"A little about Typography","Typography",["Date","2025-03-25T21:00:00.000Z"],"I've found myself recently drawn to certain typefaces, particularly Helvetica. There's some reassurance, boldness, comfort and trust I feel when I look at this font. I am not sure why, maybe some childhood poster nostalgia, maybe it's something else. But I've always felt drawn and \"targeted\" by some certain design choices, and typography is one of them. So I decided to do a little research so I can familiarize myself a bit with typography and these are my notes.\n\n**Typography** refers to the art and technique behind arranging words, letters and characters in printed material that affects readability and legibility.\nGood typography grabs attention, builds hierarchy and brand recognition. Without effective typography, designs fail to communicate to their intended audience.\n\n**Typeface.** A typeface groups similar/related types of text e.g Helvetica, Roboto. These share common design features. Think of this as your font-family if you've written CSS before but if you haven't we will look more into the differences shortly.\n\n**Fonts.** Particular styles within a typeface e.g <span>Helvetica bold</span>, <span>thin</span>, <span>extra bold</span>. Or, if you are from a CSS background, this is your font-style. We typically interchange typeface and font because _Steve Jobs_, who first brought fonts to the mac after taking a Calligraphy class, referred to them as fonts and not typefaces and that stuck. So in the digital design world, particularly in writing code, its common to see fonts and font families and not typefaces.\n\n### Typefaces\n\nBefore the Gutenberg printing press books had to be transcribed by hand. Yes, text, usually religious text, had to be transcribed by monks, by hand, a long and tedious process. You had innovation in other civilizations e.g the Chinese that allowed them to print letters on clay and more innovation in other parts of the world but the printing press was the first time paper and print really came together, and of course, that that's the format we still use today for any physical text material.\n\n<div id=\"blackletter\" style=\"display: flex; align-items: flex-start;\">\n  <div id=\"blackletter-image\" style=\"flex: 1; margin-right: 20px; margin-top: 100px\">\n    <img src=\"/src/images/typography/blackletter.jpg\" alt=\"BlackLetter Typeface\" style=\"max-width: 100%; height: auto;\">\n  </div>\n  <div style=\"flex: 2\">\n    <p>When Gutenberg made the printing press, he used <strong>BlackLetter</strong>, the same typeface that was used by monks to transcribe text. <strong>BlackLetter</strong> was hard to read, not only in writing but in any print material as you can see form the sample text. The need for better legibility started a revolution to discover the best font for print/modern material. And just like European art, the font space started its own revolution mostly driven by rebels and creative types. And just like that, newer typefaces were invented</p>\n  </div>\n</div>\n\n**Serif** <br />\nSerif typefaces have accents/decorative lines/flourishes on them called serifs. They were first invented by **Nicholas Jensen** after chopping the flourishes off calligraphy script. He called it the roman type face. Associated with stability enduring value and tradition, they have been around a long time. They are used by banks, jewelers and lawyers. Serif typefaces are good for times less design but bad for contemporary designs or playful designs. A good example of a serif font is _Times New Roman_\n\n<div style=\"display: flex\">\n  <div>\n    <img src=\"/src/images/typography/Serif vs sans serif fonts.jpg\" style=\"width: 400px\">\n  </div>\n  <img src=\"/src/images/typography/times new roman.jpg\" style=\"height:400px\" />\n</div>\n\n**Sans-Serifs** <br />\nSans means without in french, so san serifs means without serifs\nThey are versatile, as they lack a distinctive personality. Sans Serif fonts have a lot of variability in terms of their font styling. You can change size, boldness, italisize them, change amount of boldness and how thick the font appears.\n<img src=\"/src/images/typography/Gill_Sans_specimen_sheet.jpg\" style=\"height:400px\"/>\n\nThey are usually also very legible. You can use one type face for your entire brand ie you can use the thick & bold (both adjustable) variant for your headings and thinner lighter (both adjustable) variant for paragraphs. They are the default choice for **90%** of consumer products and are used in logos, ads, license plates, key caps, billboards, packaging and company logos. e.g _Google, Spotify, Microsoft, Facebook, Chanel_.\n\nThey were invented to remove decorations from type faces. They feel more modern, because contemporary design removes a lot of ostentation, fancy decorations. As evident in the evolution of the apple logo.\n\n<img src=\"/src/images/typography/old vs new logos.png\"/>\n\n**Slab Serifs** <br />\nSlab serifs are just as bold as Serif fonts with a twist on the serif ornamentation. The serifs have strong bold and modern aesthetic, ostentations meant to draw attention. These will commonly be used in headers and logos.\n<img src=\"/src/images/typography/slab serif.jpg\" width=\"500px\"/>\n\n**Display typefaces** <br />\nDisplay fontfaces can be serif or even San-serifs. They are mostly meant for single lines of text and are usually applied in logos or landing pages. Think _chick-fil-A_ or _Tesla_. They don't make good paragraphs but are designed for single lines of text. These are often stylistic and unique and gained popularity during the advertising age.\n\n<div class=\"image-container\" style=\"display: flex; gap: 30px; flex-wrap: wrap;\">\n  <img src=\"/src/images/typography/display typeface.jpg\" width=\"300px\" />\n  <img src=\"/src/images/typography/Chick-fil-A-Logo-2012-present.png\" width=\"300px\" />\n</div>\n<br />\n\n**Script typefaces** <br />\nScript typefaces are meant to look like old school calligraphy, inspired by handwriting from the 17th century. Based on the flow of cursive handwriting, they are great for headers, titles and any types of display text. They are often used on wedding invitations and diplomas.\n<img src=\"/src/images/typography/letterscript.png\" width=\"600px\"/>\n\n**Pixelated Typefaces**\n<img src=\"/src/images/typography/doom pixalated font.png\" width=\"600px\"/> <br />\nAlso known as bitmap fonts originated in the 1980s with the rise of computer graphics and video games.\n\n**Monospace Typefaces** <br />\nMonospace fonts occupy the same horizontal space, unlike proportional fonts like Helvetica where the \"I\"s might have different spacing from the \"W\"s. <br />\nSome Monospace typefonts like **Courier** mimic old typewrites. Monospace typefaces work great in well structred environments where things like aligment matter e.g code editors.\n<img src=\"/src/images/typography/monospace fonts.png\" width=\"600px\"/>\n\n### Beyond typefaces - Font Design\n\nBeyond typefaces, the nuances of weight, sizing and spacing influence how we perceive text and interact with written information. Font design goes into what makes font stand out, be legible, have visual prominence and hierarchy, reading comfort, contrast and determine how easily our eyes can move across a piece of text which might affect concentration for ADHD types, myself included.\n\nFont design can help you evoke certain emotions, memories, can convey strength, elegance or sophistication. Understanding a few of elements of design can help you more effectively use fonts to create designs that convey harmony to readers.\n\n**Font Weight** <br />\nFont weight refers to the **Boldness** or <span style=\"font-weight: 100; font-style: italic\">Thinness</span> of a font. Bolder fonts demands more visual attention so they are used for titles. Thinner fonts are easier to read so better for paragraphs or long lines of text. Thinner lines can also be used to convey sophistication especially when they are written in cursive.\n\n**Font Sizing** <br />\nFont size if a primary tool for establishing hierarchy. Larger fonts are used for headings while smaller fonts are used for paragraph text. Designers typically measure font size in rems which are relative units of measurements used to standardize size recommendations.\n\n_EM_. Stands for equal measurement. Sets the character of a character equal to the size of a font. on the web the size of a font is 16px, so if you wanted a heading to be 32px, you would set it to 2em. This allows relative sizing.\n\n_REM_. Stands for root EM. Sets size relative to the root font size. You can set root font size as below\n\n**Font Spacing** <br />\nGood font spacing is important for accessibility particularly with people with visual impairments.\n\n<img src=\"/src/images/typography/typediagram.png\" width=\"600px\"/> <br />\n**Baseline** - Invisible line upon which your font rests. e.g school line papers.<br />\n**Cap line** - A cap line determines how high up fonts can go, or their limit vertically.\n**X-height** - This is a line that constrains the height of the lowercase letters.<br />\n**Line height/Leading** - The space between lines. Measured from baseline to baseline. Crucial for readability especially in long blocks of text.\nShould be inversely proportional to size of the font. The larger the font the smaller the line height. This increases legibility.<br />\n**Letter Spacing/Tracking** - The space between each letter. Should also be inversely proportional to the size of the font. Bigger fonts are easier to read thus more legible with less letter spacing compared to smaller fonts which can be harder to distinguish so need more spacing.<br />\n**Kerning** - Kerning is the reduction of increasing of space between individual letters.<br />\n\nSo there you go, there's a lot more about typography that you need to consider beyond typefaces, fonts, font sizes, kerning, line height e.g color contrast, hierarchy, responsive typography for the web e.t.c but I think this is a nice introduction to the basics of typography.\n\nI researched some designers and will leave you with some designs from **James Reid, Alexander Rodchenko, Varvara Stepanova and others** that highlight how important typography can be for thought provoking messaging e.g protest posters and I hope you get some nostalgia or inspiration looking at these as well.\n\n<div style=\"display: flex; flex-direction: column; gap: 10px;\">\n  <!-- First Image -->\n  <img src=\"/src/images/typography/feminist women poster.webp\" style=\"width: 100%;\" />\n\n  <!-- Middle Images -->\n  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;\">\n    <img src=\"/src/images/typography/jamie reid queen.webp\" style=\"flex: 1 1 auto; max-width: 350px;\" />\n    <img src=\"/src/images/typography/jamie reid.jpg\" style=\"flex: 1 1 auto; max-width: 350px;\" />\n    <img src=\"/src/images/typography/rodchenko-2.jpg\" style=\"flex: 1 1 auto; max-width: 500px;\" />\n    <img src=\"/src/images/typography/stepanova varvara.jpg\" style=\"flex: 1 1 auto; max-width: 350px;\" />\n  </div>\n\n  <!-- Last Image -->\n  <img src=\"/src/images/typography/we can do it poster.jpg\" style=\"width: 100%;\" />\n</div> <br />\n\n#### References & Resources\n\n[Design Spo Youtube](https://www.youtube.com/@DesignSpo) <br />\nhttps://fonts.google.com/ <br />\n[Dafont Free - Download Fonts](https://www.dafontfree.io/) <br />\n[I promise this story about fonts is interesting](https://www.youtube.com/watch?v=WVfRxFwVHQc) <br />\n[Fontsource](https://fontsource.org/) <br />\n[WhatFont - Chrome Web Store](https://chromewebstore.google.com/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm) <br />\nhttps://type.method.ac/\n\n<style>\n  div#blackletter {\n    display: flex;\n    align-items: flex-start;\n    flex-direction: row;\n    gap: 20px;\n  }\n\n  @media (max-width: 768px) {\n    div#blackletter {\n      flex-direction: column;\n      gap: 10px;\n    }\n\n    div#blackletter-image {\n      margin-top: 0px !important;\n    }\n  }\n  <style>\n  /* Default styles for the specific container */\n  .image-container {\n    display: flex;\n    gap: 30px;\n    flex-wrap: wrap; /* Ensures items wrap if they exceed the container width */\n  }\n\n  /* Styles for mobile devices */\n  @media (max-width: 768px) {\n    .image-container {\n      flex-direction: column; /* Stack items vertically */\n      align-items: center; /* Center items horizontally */\n    }\n\n    .image-container img {\n      width: 100%; /* Make images responsive and take full width */\n      max-width: 300px; /* Limit maximum width for better scaling */\n    }\n  }\n</style>","src/content/blog/typography.md","a77aeab21dd9df81",{html:21,metadata:22},"<p>I’ve found myself recently drawn to certain typefaces, particularly Helvetica. There’s some reassurance, boldness, comfort and trust I feel when I look at this font. I am not sure why, maybe some childhood poster nostalgia, maybe it’s something else. But I’ve always felt drawn and “targeted” by some certain design choices, and typography is one of them. So I decided to do a little research so I can familiarize myself a bit with typography and these are my notes.</p>\n<p><strong>Typography</strong> refers to the art and technique behind arranging words, letters and characters in printed material that affects readability and legibility.\nGood typography grabs attention, builds hierarchy and brand recognition. Without effective typography, designs fail to communicate to their intended audience.</p>\n<p><strong>Typeface.</strong> A typeface groups similar/related types of text e.g Helvetica, Roboto. These share common design features. Think of this as your font-family if you’ve written CSS before but if you haven’t we will look more into the differences shortly.</p>\n<p><strong>Fonts.</strong> Particular styles within a typeface e.g <span>Helvetica bold</span>, <span>thin</span>, <span>extra bold</span>. Or, if you are from a CSS background, this is your font-style. We typically interchange typeface and font because <em>Steve Jobs</em>, who first brought fonts to the mac after taking a Calligraphy class, referred to them as fonts and not typefaces and that stuck. So in the digital design world, particularly in writing code, its common to see fonts and font families and not typefaces.</p>\n<h3 id=\"typefaces\">Typefaces</h3>\n<p>Before the Gutenberg printing press books had to be transcribed by hand. Yes, text, usually religious text, had to be transcribed by monks, by hand, a long and tedious process. You had innovation in other civilizations e.g the Chinese that allowed them to print letters on clay and more innovation in other parts of the world but the printing press was the first time paper and print really came together, and of course, that that’s the format we still use today for any physical text material.</p>\n<div id=\"blackletter\" style=\"display: flex; align-items: flex-start;\">\n  <div id=\"blackletter-image\" style=\"flex: 1; margin-right: 20px; margin-top: 100px\">\n    <img src=\"/src/images/typography/blackletter.jpg\" alt=\"BlackLetter Typeface\" style=\"max-width: 100%; height: auto;\">\n  </div>\n  <div style=\"flex: 2\">\n    <p>When Gutenberg made the printing press, he used <strong>BlackLetter</strong>, the same typeface that was used by monks to transcribe text. <strong>BlackLetter</strong> was hard to read, not only in writing but in any print material as you can see form the sample text. The need for better legibility started a revolution to discover the best font for print/modern material. And just like European art, the font space started its own revolution mostly driven by rebels and creative types. And just like that, newer typefaces were invented</p>\n  </div>\n</div>\n<p><strong>Serif</strong> <br>\nSerif typefaces have accents/decorative lines/flourishes on them called serifs. They were first invented by <strong>Nicholas Jensen</strong> after chopping the flourishes off calligraphy script. He called it the roman type face. Associated with stability enduring value and tradition, they have been around a long time. They are used by banks, jewelers and lawyers. Serif typefaces are good for times less design but bad for contemporary designs or playful designs. A good example of a serif font is <em>Times New Roman</em></p>\n<div style=\"display: flex\">\n  <div>\n    <img src=\"/src/images/typography/Serif vs sans serif fonts.jpg\" style=\"width: 400px\">\n  </div>\n  <img src=\"/src/images/typography/times new roman.jpg\" style=\"height:400px\">\n</div>\n<p><strong>Sans-Serifs</strong> <br>\nSans means without in french, so san serifs means without serifs\nThey are versatile, as they lack a distinctive personality. Sans Serif fonts have a lot of variability in terms of their font styling. You can change size, boldness, italisize them, change amount of boldness and how thick the font appears.\n<img src=\"/src/images/typography/Gill_Sans_specimen_sheet.jpg\" style=\"height:400px\"></p>\n<p>They are usually also very legible. You can use one type face for your entire brand ie you can use the thick &#x26; bold (both adjustable) variant for your headings and thinner lighter (both adjustable) variant for paragraphs. They are the default choice for <strong>90%</strong> of consumer products and are used in logos, ads, license plates, key caps, billboards, packaging and company logos. e.g <em>Google, Spotify, Microsoft, Facebook, Chanel</em>.</p>\n<p>They were invented to remove decorations from type faces. They feel more modern, because contemporary design removes a lot of ostentation, fancy decorations. As evident in the evolution of the apple logo.</p>\n<img src=\"/src/images/typography/old vs new logos.png\">\n<p><strong>Slab Serifs</strong> <br>\nSlab serifs are just as bold as Serif fonts with a twist on the serif ornamentation. The serifs have strong bold and modern aesthetic, ostentations meant to draw attention. These will commonly be used in headers and logos.\n<img src=\"/src/images/typography/slab serif.jpg\" width=\"500px\"></p>\n<p><strong>Display typefaces</strong> <br>\nDisplay fontfaces can be serif or even San-serifs. They are mostly meant for single lines of text and are usually applied in logos or landing pages. Think <em>chick-fil-A</em> or <em>Tesla</em>. They don’t make good paragraphs but are designed for single lines of text. These are often stylistic and unique and gained popularity during the advertising age.</p>\n<div class=\"image-container\" style=\"display: flex; gap: 30px; flex-wrap: wrap;\">\n  <img src=\"/src/images/typography/display typeface.jpg\" width=\"300px\">\n  <img src=\"/src/images/typography/Chick-fil-A-Logo-2012-present.png\" width=\"300px\">\n</div>\n<br>\n<p><strong>Script typefaces</strong> <br>\nScript typefaces are meant to look like old school calligraphy, inspired by handwriting from the 17th century. Based on the flow of cursive handwriting, they are great for headers, titles and any types of display text. They are often used on wedding invitations and diplomas.\n<img src=\"/src/images/typography/letterscript.png\" width=\"600px\"></p>\n<p><strong>Pixelated Typefaces</strong>\n<img src=\"/src/images/typography/doom pixalated font.png\" width=\"600px\"> <br>\nAlso known as bitmap fonts originated in the 1980s with the rise of computer graphics and video games.</p>\n<p><strong>Monospace Typefaces</strong> <br>\nMonospace fonts occupy the same horizontal space, unlike proportional fonts like Helvetica where the “I”s might have different spacing from the “W”s. <br>\nSome Monospace typefonts like <strong>Courier</strong> mimic old typewrites. Monospace typefaces work great in well structred environments where things like aligment matter e.g code editors.\n<img src=\"/src/images/typography/monospace fonts.png\" width=\"600px\"></p>\n<h3 id=\"beyond-typefaces---font-design\">Beyond typefaces - Font Design</h3>\n<p>Beyond typefaces, the nuances of weight, sizing and spacing influence how we perceive text and interact with written information. Font design goes into what makes font stand out, be legible, have visual prominence and hierarchy, reading comfort, contrast and determine how easily our eyes can move across a piece of text which might affect concentration for ADHD types, myself included.</p>\n<p>Font design can help you evoke certain emotions, memories, can convey strength, elegance or sophistication. Understanding a few of elements of design can help you more effectively use fonts to create designs that convey harmony to readers.</p>\n<p><strong>Font Weight</strong> <br>\nFont weight refers to the <strong>Boldness</strong> or <span style=\"font-weight: 100; font-style: italic\">Thinness</span> of a font. Bolder fonts demands more visual attention so they are used for titles. Thinner fonts are easier to read so better for paragraphs or long lines of text. Thinner lines can also be used to convey sophistication especially when they are written in cursive.</p>\n<p><strong>Font Sizing</strong> <br>\nFont size if a primary tool for establishing hierarchy. Larger fonts are used for headings while smaller fonts are used for paragraph text. Designers typically measure font size in rems which are relative units of measurements used to standardize size recommendations.</p>\n<p><em>EM</em>. Stands for equal measurement. Sets the character of a character equal to the size of a font. on the web the size of a font is 16px, so if you wanted a heading to be 32px, you would set it to 2em. This allows relative sizing.</p>\n<p><em>REM</em>. Stands for root EM. Sets size relative to the root font size. You can set root font size as below</p>\n<p><strong>Font Spacing</strong> <br>\nGood font spacing is important for accessibility particularly with people with visual impairments.</p>\n<p><img src=\"/src/images/typography/typediagram.png\" width=\"600px\"> <br>\n<strong>Baseline</strong> - Invisible line upon which your font rests. e.g school line papers.<br>\n<strong>Cap line</strong> - A cap line determines how high up fonts can go, or their limit vertically.\n<strong>X-height</strong> - This is a line that constrains the height of the lowercase letters.<br>\n<strong>Line height/Leading</strong> - The space between lines. Measured from baseline to baseline. Crucial for readability especially in long blocks of text.\nShould be inversely proportional to size of the font. The larger the font the smaller the line height. This increases legibility.<br>\n<strong>Letter Spacing/Tracking</strong> - The space between each letter. Should also be inversely proportional to the size of the font. Bigger fonts are easier to read thus more legible with less letter spacing compared to smaller fonts which can be harder to distinguish so need more spacing.<br>\n<strong>Kerning</strong> - Kerning is the reduction of increasing of space between individual letters.<br></p>\n<p>So there you go, there’s a lot more about typography that you need to consider beyond typefaces, fonts, font sizes, kerning, line height e.g color contrast, hierarchy, responsive typography for the web e.t.c but I think this is a nice introduction to the basics of typography.</p>\n<p>I researched some designers and will leave you with some designs from <strong>James Reid, Alexander Rodchenko, Varvara Stepanova and others</strong> that highlight how important typography can be for thought provoking messaging e.g protest posters and I hope you get some nostalgia or inspiration looking at these as well.</p>\n<div style=\"display: flex; flex-direction: column; gap: 10px;\">\n  <!-- First Image -->\n  <img src=\"/src/images/typography/feminist women poster.webp\" style=\"width: 100%;\">\n  <!-- Middle Images -->\n  <div style=\"display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;\">\n    <img src=\"/src/images/typography/jamie reid queen.webp\" style=\"flex: 1 1 auto; max-width: 350px;\">\n    <img src=\"/src/images/typography/jamie reid.jpg\" style=\"flex: 1 1 auto; max-width: 350px;\">\n    <img src=\"/src/images/typography/rodchenko-2.jpg\" style=\"flex: 1 1 auto; max-width: 500px;\">\n    <img src=\"/src/images/typography/stepanova varvara.jpg\" style=\"flex: 1 1 auto; max-width: 350px;\">\n  </div>\n  <!-- Last Image -->\n  <img src=\"/src/images/typography/we can do it poster.jpg\" style=\"width: 100%;\">\n</div> <br>\n<h4 id=\"references--resources\">References &#x26; Resources</h4>\n<p><a href=\"https://www.youtube.com/@DesignSpo\">Design Spo Youtube</a> <br>\n<a href=\"https://fonts.google.com/\">https://fonts.google.com/</a> <br>\n<a href=\"https://www.dafontfree.io/\">Dafont Free - Download Fonts</a> <br>\n<a href=\"https://www.youtube.com/watch?v=WVfRxFwVHQc\">I promise this story about fonts is interesting</a> <br>\n<a href=\"https://fontsource.org/\">Fontsource</a> <br>\n<a href=\"https://chromewebstore.google.com/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm\">WhatFont - Chrome Web Store</a> <br>\n<a href=\"https://type.method.ac/\">https://type.method.ac/</a></p>\n<style>\n  div#blackletter {\n    display: flex;\n    align-items: flex-start;\n    flex-direction: row;\n    gap: 20px;\n  }\n\n  @media (max-width: 768px) {\n    div#blackletter {\n      flex-direction: column;\n      gap: 10px;\n    }\n\n    div#blackletter-image {\n      margin-top: 0px !important;\n    }\n  }\n  <style>\n  /* Default styles for the specific container */\n  .image-container {\n    display: flex;\n    gap: 30px;\n    flex-wrap: wrap; /* Ensures items wrap if they exceed the container width */\n  }\n\n  /* Styles for mobile devices */\n  @media (max-width: 768px) {\n    .image-container {\n      flex-direction: column; /* Stack items vertically */\n      align-items: center; /* Center items horizontally */\n    }\n\n    .image-container img {\n      width: 100%; /* Make images responsive and take full width */\n      max-width: 300px; /* Limit maximum width for better scaling */\n    }\n  }\n</style>",{headings:23,localImagePaths:35,remoteImagePaths:36,frontmatter:37,imagePaths:39},[24,28,31],{depth:25,slug:26,text:27},3,"typefaces","Typefaces",{depth:25,slug:29,text:30},"beyond-typefaces---font-design","Beyond typefaces - Font Design",{depth:32,slug:33,text:34},4,"references--resources","References & Resources",[],[],{title:14,description:15,pubDate:38},"Mar 26 2025",[],"creating-impact-at-any-company-you-join",{id:40,data:42,body:45,filePath:46,digest:47,rendered:48},{title:43,description:43,pubDate:44},"How to Create Impact at Any Company You Join",["Date","2023-12-19T21:00:00.000Z"],"Embarking on a journey with a new company offers a myriad of opportunities for growth and contribution. To ensure a meaningful impact, consider the following steps and strategies:\n\n1. **Gain a Holistic Understanding of the Business**\n\n- Familiarize yourself with the company’s wide array of products and their interconnectedness.\n- Understand the customer base and how the company adds value to their business.\n- Explore major clients and competitors, and grasp the company’s market positioning and future trajectory.\n- Dive into quarterly priorities to align yourself with the company’s strategic direction.\n\n2. **Navigate the Internal Landscape**\n\n- Acquaint yourself with internal teams, organizational structure, and key company events.\n- Attend company meetings, actively take notes, and engage with colleagues to build connections.\n- Identify team leaders and crucial points of contact within the organization.\n\n3. **Proactively Manage Your Relationship with Your Manager**\n\n- Initiate regular meetings to discuss expectations, monitor progress, and seek constructive feedback.\n- Be proactive in reaching out to your manager, ensuring a clear line of communication.\n- Explore progression frameworks, such as those available on https://progression.fyi/ or internal company resources, to guide your professional growth.\n\n4. **Master the Technical Landscape**\n\n- Familiarize yourself with the codebase, deployment methods, and essential tooling.\n- Understand the roles of key stakeholders, internal processes, and external dependencies.\n- Install necessary software promptly and address onboarding requirements efficiently.\n\n5. **Balance Learning and Visibility in the First 3 Months**\n\n- Allocate time to learn about the company’s intricacies while consistently delivering high-quality work.\n- Identify domain experts and seek their guidance to accelerate your learning curve.\n- Make yourself visible to different teams and actively contribute to projects.\n\n6. **Invest in Personal Growth**\n\n- Demonstrate initiative by attending meetings on time and actively participating.\n- Ask questions, write documentation, and continually strive to enhance your skills.\n- Measure code metrics and identify opportunities for improvement.\n\n7. **Engage in Collaborative Efforts**\n\n- Review pull requests and dedicate time to assisting colleagues with their work.\n- Volunteer for additional responsibilities and actively contribute to the collective success of the team.\n- Participate in non-work-related activities, both in-person and online, to build connections with colleagues.\n\n8. **Prioritize Well-Being**\n\n- Remember to take regular breaks and utilize leave to prevent burnout.\n- Strive for a healthy work-life balance to sustain long-term productivity and well-being.\n\nBy implementing these strategies, you can navigate your initial months effectively, contributing meaningfully to your team and fostering a successful and fulfilling career with the company.","src/content/blog/creating-impact-at-any-company-you-join.md","18deb7626b2de50e",{html:49,metadata:50},"<p>Embarking on a journey with a new company offers a myriad of opportunities for growth and contribution. To ensure a meaningful impact, consider the following steps and strategies:</p>\n<ol>\n<li><strong>Gain a Holistic Understanding of the Business</strong></li>\n</ol>\n<ul>\n<li>Familiarize yourself with the company’s wide array of products and their interconnectedness.</li>\n<li>Understand the customer base and how the company adds value to their business.</li>\n<li>Explore major clients and competitors, and grasp the company’s market positioning and future trajectory.</li>\n<li>Dive into quarterly priorities to align yourself with the company’s strategic direction.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Navigate the Internal Landscape</strong></li>\n</ol>\n<ul>\n<li>Acquaint yourself with internal teams, organizational structure, and key company events.</li>\n<li>Attend company meetings, actively take notes, and engage with colleagues to build connections.</li>\n<li>Identify team leaders and crucial points of contact within the organization.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Proactively Manage Your Relationship with Your Manager</strong></li>\n</ol>\n<ul>\n<li>Initiate regular meetings to discuss expectations, monitor progress, and seek constructive feedback.</li>\n<li>Be proactive in reaching out to your manager, ensuring a clear line of communication.</li>\n<li>Explore progression frameworks, such as those available on <a href=\"https://progression.fyi/\">https://progression.fyi/</a> or internal company resources, to guide your professional growth.</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Master the Technical Landscape</strong></li>\n</ol>\n<ul>\n<li>Familiarize yourself with the codebase, deployment methods, and essential tooling.</li>\n<li>Understand the roles of key stakeholders, internal processes, and external dependencies.</li>\n<li>Install necessary software promptly and address onboarding requirements efficiently.</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Balance Learning and Visibility in the First 3 Months</strong></li>\n</ol>\n<ul>\n<li>Allocate time to learn about the company’s intricacies while consistently delivering high-quality work.</li>\n<li>Identify domain experts and seek their guidance to accelerate your learning curve.</li>\n<li>Make yourself visible to different teams and actively contribute to projects.</li>\n</ul>\n<ol start=\"6\">\n<li><strong>Invest in Personal Growth</strong></li>\n</ol>\n<ul>\n<li>Demonstrate initiative by attending meetings on time and actively participating.</li>\n<li>Ask questions, write documentation, and continually strive to enhance your skills.</li>\n<li>Measure code metrics and identify opportunities for improvement.</li>\n</ul>\n<ol start=\"7\">\n<li><strong>Engage in Collaborative Efforts</strong></li>\n</ol>\n<ul>\n<li>Review pull requests and dedicate time to assisting colleagues with their work.</li>\n<li>Volunteer for additional responsibilities and actively contribute to the collective success of the team.</li>\n<li>Participate in non-work-related activities, both in-person and online, to build connections with colleagues.</li>\n</ul>\n<ol start=\"8\">\n<li><strong>Prioritize Well-Being</strong></li>\n</ol>\n<ul>\n<li>Remember to take regular breaks and utilize leave to prevent burnout.</li>\n<li>Strive for a healthy work-life balance to sustain long-term productivity and well-being.</li>\n</ul>\n<p>By implementing these strategies, you can navigate your initial months effectively, contributing meaningfully to your team and fostering a successful and fulfilling career with the company.</p>",{headings:51,localImagePaths:52,remoteImagePaths:53,frontmatter:54,imagePaths:56},[],[],[],{title:43,description:43,pubDate:55},"Dec 20 2023",[],"tail-call-optimization-javascript",{id:57,data:59,body:62,filePath:63,digest:64,rendered:65},{title:60,description:60,pubDate:61},"Tail Call Optimization Javascript",["Date","2023-10-23T21:00:00.000Z"],"In _JavaScript_, **Tail Call Optimization** is an optimization technique used by some JavaScript engines to make recursive function calls more memory-efficient. To understand _TCO_, you first need to be familiar with a few concepts:\n\n**Recursion**: Recursion is a programming technique where a function calls itself to solve a problem. Recursive functions can be powerful but may lead to stack overflow errors if not optimized, especially for deep recursive calls.\n\n**Call Stack**: JavaScript uses a call stack to keep track of function calls. Each time a function is called, a new frame is added to the stack, and when the function returns, the frame is removed. Deep recursive calls can fill up the call stack and lead to stack overflow errors.\n\n**Tail Call**: A tail call occurs when a function’s last action is to call another function. In other words, it’s a function call that appears at the end of another function. Tail calls are significant in the context of TCO.\n\n**Tail Call Optimization** (TCO) is an optimization technique that eliminates the need to create a new stack frame for a function call when the call is in a tail position. Instead of adding a new frame to the call stack, _TCO_ reuses the current frame, making the process more memory-efficient and preventing stack overflow errors for deep recursion.\n\nHere’s an example to illustrate TCO:\n\n```javascript\nfunction factorial(n, accumulator = 1) {\n  if (n === 0) return accumulator;\n  return factorial(n - 1, accumulator * n);\n}\n```\n\nIn this example, the factorial function calculates the factorial of a number using a _tail-recursive approach_. The recursive call occurs in the tail position, and modern JavaScript engines that support _TCO_ will optimize it to prevent excessive stack usage.\n\nThis is how the data is passed as an example calculating 5!\n\n`console.log(factorial(5))`\n\n```javascript\n5,1 => 4,5\n4,5 => 3, 20\n3,20 => 2, 60\n2,60 => 1, 120\n1,120 => 0, 120\n```\n\nAs you can seem we accumulate the value of n\\*1 from n to 1 avoiding creation of new stack frames with each request. This uses less memory as each new call passes all required data and does not create a new call slack.\n\nThis feature is however not shipped in all browsers, only safari with Edge Chrome and Firefox not agreeing on a standard way to ship it.","src/content/blog/tail-call-optimization-javascript.md","404d0b6eb7a7a36a",{html:66,metadata:67},"<p>In <em>JavaScript</em>, <strong>Tail Call Optimization</strong> is an optimization technique used by some JavaScript engines to make recursive function calls more memory-efficient. To understand <em>TCO</em>, you first need to be familiar with a few concepts:</p>\n<p><strong>Recursion</strong>: Recursion is a programming technique where a function calls itself to solve a problem. Recursive functions can be powerful but may lead to stack overflow errors if not optimized, especially for deep recursive calls.</p>\n<p><strong>Call Stack</strong>: JavaScript uses a call stack to keep track of function calls. Each time a function is called, a new frame is added to the stack, and when the function returns, the frame is removed. Deep recursive calls can fill up the call stack and lead to stack overflow errors.</p>\n<p><strong>Tail Call</strong>: A tail call occurs when a function’s last action is to call another function. In other words, it’s a function call that appears at the end of another function. Tail calls are significant in the context of TCO.</p>\n<p><strong>Tail Call Optimization</strong> (TCO) is an optimization technique that eliminates the need to create a new stack frame for a function call when the call is in a tail position. Instead of adding a new frame to the call stack, <em>TCO</em> reuses the current frame, making the process more memory-efficient and preventing stack overflow errors for deep recursion.</p>\n<p>Here’s an example to illustrate TCO:</p>\n<pre class=\"astro-code astro-code-themes synthwave-84 dracula\" style=\"background-color:#262335;--shiki-dark-bg:#282A36;color:#bbbbbb;--shiki-dark:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">function</span><span style=\"color:#36F9F6;--shiki-dark:#50FA7B\"> factorial</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">(</span><span style=\"color:#FF7EDB;font-style:italic;--shiki-dark:#FFB86C;--shiki-dark-font-style:italic\">n</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#FF7EDB;font-style:italic;--shiki-dark:#FFB86C;--shiki-dark-font-style:italic\">accumulator</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 1</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">  if</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\"> (</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">n</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> ===</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 0</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">) </span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">return</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> accumulator</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">  return</span><span style=\"color:#36F9F6;--shiki-dark:#50FA7B\"> factorial</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">(</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">n</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> -</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 1</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">accumulator</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> *</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> n</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">}</span></span></code></pre>\n<p>In this example, the factorial function calculates the factorial of a number using a <em>tail-recursive approach</em>. The recursive call occurs in the tail position, and modern JavaScript engines that support <em>TCO</em> will optimize it to prevent excessive stack usage.</p>\n<p>This is how the data is passed as an example calculating 5!</p>\n<p><code>console.log(factorial(5))</code></p>\n<pre class=\"astro-code astro-code-themes synthwave-84 dracula\" style=\"background-color:#262335;--shiki-dark-bg:#282A36;color:#bbbbbb;--shiki-dark:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">5</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">,</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">1</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> =></span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 4</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">,</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">5</span></span>\n<span class=\"line\"><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">4</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">,</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">5</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> =></span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 3</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">20</span></span>\n<span class=\"line\"><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">3</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">,</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">20</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> =></span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 2</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">60</span></span>\n<span class=\"line\"><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">2</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">,</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">60</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> =></span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 1</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">120</span></span>\n<span class=\"line\"><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">1</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">,</span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">120</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> =></span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\"> 0</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#2EE2FA;--shiki-dark:#BD93F9\">120</span></span></code></pre>\n<p>As you can seem we accumulate the value of n*1 from n to 1 avoiding creation of new stack frames with each request. This uses less memory as each new call passes all required data and does not create a new call slack.</p>\n<p>This feature is however not shipped in all browsers, only safari with Edge Chrome and Firefox not agreeing on a standard way to ship it.</p>",{headings:68,localImagePaths:69,remoteImagePaths:70,frontmatter:71,imagePaths:73},[],[],[],{title:60,description:60,pubDate:72},"Oct 24 2023",[],"floating-point-arithmetic-ieee754",{id:74,data:76,body:80,filePath:81,digest:82,rendered:83},{title:77,description:78,pubDate:79},"Floating point Arithmetic IEEE 754","Why 0.1 + 0.2 = 0.30000000000000004",["Date","2025-01-30T21:00:00.000Z"],"Why is the result of `0.1 + 0.2` `0.30000000000000004` instead of `0.3`?\n\nTo understand this we need to cover some preliminaries first. Human beings tend to think in decimal, and it's obvious to us that 0.1 + 0.2 = 0.3. However, computers represent numbers in binary.\n\nIn any number system e.g *base 10, base 2*, fractions are represented as sums of powers of the base.\nIn base 10, fractions are powers of 10 e.g 3/10 = 3 * 10^-1\nIn base 2, fractions are sums powers of 2. e.g 1/2 = 1 * 2^-1\n\nHere's a general rule, **a fraction in any number system can be represented accurately if the denominator of the fraction has prime factors that are also [prime factors](https://byjus.com/maths/prime-factorization/) of the base.**\n\n*1/2, 1/4, 1/5, 1/10* can be represented accurately in **base 10** because the denominators 2, 4, 5, 10 include prime factors of 10(2&5) while 1/3 or 1/7 or 1/6 cannot.\n\n*1/2* can be represented perfectly in binary but *1/10* cannot. The denominator 10, has prime factors 2 and 5, 2 is present in the factors of 2 i.e only 2 but 5 is not. Because of this, there will be some recursion when trying to represent 1/10 in binary.\n\nTo convert `0.1` to binary, we repeatedly multiply the fractional part by `2` and take the integer part of the result as the next binary digit. [How to convert Decimal to Binary](https://www.youtube.com/shorts/RBt2vtcPsC8))\n    1. `0.1 × 2 = 0.2` → integer part = `0`, fractional part = `0.2`\n    2. `0.2 × 2 = 0.4` → integer part = `0`, fractional part = `0.4`\n    3. `0.4 × 2 = 0.8` → integer part = `0`, fractional part = `0.8`\n    4. `0.8 × 2 = 1.6` → integer part = `1`, fractional part = `0.6`\n    5. `0.6 × 2 = 1.2` → integer part = `1`, fractional part = `0.2`\n    6. `0.2 × 2 = 0.4` → integer part = `0`, fractional part = `0.4`\n    7. `0.4 × 2 = 0.8` → integer part = `0`, fractional part = `0.8`\n    8. `0.8 × 2 = 1.6` → integer part = `1`, fractional part = `0.6`\n    9. And so on...\n\n This recursion has to be approximated because computers have limited memory and have to use a certain number of bits to represent integers or floats e.g *64 bits*. Same way humans round 1/3(base 10) to something like 0.333.\n\n0.1 in binary works out to about **00001100110011001100110011001100110011001100110011** but we know computers store numbers in memory as 0000 no decimal points, just a 0 or a 1 in the memory location. Assuming 8 bits, we would represent 1 & 2 as:\n\n```typescipt\n1 -> 0000 0001\n2 -> 0000 0010\n```\n\nSo how do we represent a number like 0.000001?\n\nThere's a standard for how computers represent floating point numbers [IEEE 754]([IEEE754.PDF](https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF)).  This standard works by dividing floating numbers into three parts: **A sign bit, 11 exponent bits and 52 mantissa bits** for a 64 bit computer.\n\nThe sign bit represents whether the number is *+ve or -ve*, the exponent represents how many times we should move the decimal to the right side of the mantissa, the mantissa represents the floating point bit.\n\nThe binary representation of 0.1 `0.0001100110011001100110011001100110011001100110011`\n\nUsing IEEE754 standard we store this as:\n\n```typescript\nsign bit : 0\nexponent: -4 + 1024 = 1019 = 01111111011 (in binary)\nmantissa = 1001100110011001100110011001100110011001100110011010\n```\n\nThe 1024 is added to the exponent. It's called a biased exponent and helps computers simplify calculations. For why they chose this over two's complement read [ieee 754 - Why do we bias the exponent of a floating-point number? - Stack Overflow](https://stackoverflow.com/questions/19864749/why-do-we-bias-the-exponent-of-a-floating-point-number)\n\nSo the *IEEE754* number interpreted gives\n`1.1001100110011001100110011001100110011001100110011010 * 2^-4`\nwhich is approximately\n`0.1000000000000000055511151231257827021181583404541015625`\n\nhence why **0.1+0.2=0.30000000000000004**\n\nIf you need to handle floating point arithmetic accurately use libraries like [Decimal.js: An arbitrary-precision Decimal type for JavaScript](https://github.com/MikeMcl/decimal.js/)\n\n#### References\n\n---\n[Floating Point Numbers - Computerphile](https://www.youtube.com/watch?v=PZRI1IfStY0)<br />\n[IEEE-754 Floating Point Converter](https://www.h-schmidt.net/FloatConverter/IEEE754.html)<br />\n[Prime Factorization - Definition, Methods, Examples, Prime Factorize](https://byjus.com/maths/prime-factorization/)<br />\n[IEEE Standard 754 Floating Point Numbers - GeeksforGeeks](https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/)<br />\n[IEEE754.PDF](https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF)<br />\n[(3) Decimal Fraction to Binary Convert - YouTube](https://www.youtube.com/shorts/RBt2vtcPsC8)<br />\n[ieee 754 - Why do we bias the exponent of a floating-point number? - Stack Overflow](https://stackoverflow.com/questions/19864749/why-do-we-bias-the-exponent-of-a-floating-point-number)","src/content/blog/floating-point-arithmetic-ieee754.md","c459d27519d56440",{html:84,metadata:85},"<p>Why is the result of <code>0.1 + 0.2</code> <code>0.30000000000000004</code> instead of <code>0.3</code>?</p>\n<p>To understand this we need to cover some preliminaries first. Human beings tend to think in decimal, and it’s obvious to us that 0.1 + 0.2 = 0.3. However, computers represent numbers in binary.</p>\n<p>In any number system e.g <em>base 10, base 2</em>, fractions are represented as sums of powers of the base.\nIn base 10, fractions are powers of 10 e.g 3/10 = 3 * 10^-1\nIn base 2, fractions are sums powers of 2. e.g 1/2 = 1 * 2^-1</p>\n<p>Here’s a general rule, <strong>a fraction in any number system can be represented accurately if the denominator of the fraction has prime factors that are also <a href=\"https://byjus.com/maths/prime-factorization/\">prime factors</a> of the base.</strong></p>\n<p><em>1/2, 1/4, 1/5, 1/10</em> can be represented accurately in <strong>base 10</strong> because the denominators 2, 4, 5, 10 include prime factors of 10(2&#x26;5) while 1/3 or 1/7 or 1/6 cannot.</p>\n<p><em>1/2</em> can be represented perfectly in binary but <em>1/10</em> cannot. The denominator 10, has prime factors 2 and 5, 2 is present in the factors of 2 i.e only 2 but 5 is not. Because of this, there will be some recursion when trying to represent 1/10 in binary.</p>\n<p>To convert <code>0.1</code> to binary, we repeatedly multiply the fractional part by <code>2</code> and take the integer part of the result as the next binary digit. <a href=\"https://www.youtube.com/shorts/RBt2vtcPsC8\">How to convert Decimal to Binary</a>)\n1. <code>0.1 × 2 = 0.2</code> → integer part = <code>0</code>, fractional part = <code>0.2</code>\n2. <code>0.2 × 2 = 0.4</code> → integer part = <code>0</code>, fractional part = <code>0.4</code>\n3. <code>0.4 × 2 = 0.8</code> → integer part = <code>0</code>, fractional part = <code>0.8</code>\n4. <code>0.8 × 2 = 1.6</code> → integer part = <code>1</code>, fractional part = <code>0.6</code>\n5. <code>0.6 × 2 = 1.2</code> → integer part = <code>1</code>, fractional part = <code>0.2</code>\n6. <code>0.2 × 2 = 0.4</code> → integer part = <code>0</code>, fractional part = <code>0.4</code>\n7. <code>0.4 × 2 = 0.8</code> → integer part = <code>0</code>, fractional part = <code>0.8</code>\n8. <code>0.8 × 2 = 1.6</code> → integer part = <code>1</code>, fractional part = <code>0.6</code>\n9. And so on…</p>\n<p>This recursion has to be approximated because computers have limited memory and have to use a certain number of bits to represent integers or floats e.g <em>64 bits</em>. Same way humans round 1/3(base 10) to something like 0.333.</p>\n<p>0.1 in binary works out to about <strong>00001100110011001100110011001100110011001100110011</strong> but we know computers store numbers in memory as 0000 no decimal points, just a 0 or a 1 in the memory location. Assuming 8 bits, we would represent 1 &#x26; 2 as:</p>\n<pre class=\"astro-code astro-code-themes synthwave-84 dracula\" style=\"background-color:#262335;--shiki-dark-bg:#282A36;color:#bbbbbb;--shiki-dark:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>1 -> 0000 0001</span></span>\n<span class=\"line\"><span>2 -> 0000 0010</span></span></code></pre>\n<p>So how do we represent a number like 0.000001?</p>\n<p>There’s a standard for how computers represent floating point numbers <a href=\"%5BIEEE754.PDF%5D(https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF)\">IEEE 754</a>.  This standard works by dividing floating numbers into three parts: <strong>A sign bit, 11 exponent bits and 52 mantissa bits</strong> for a 64 bit computer.</p>\n<p>The sign bit represents whether the number is <em>+ve or -ve</em>, the exponent represents how many times we should move the decimal to the right side of the mantissa, the mantissa represents the floating point bit.</p>\n<p>The binary representation of 0.1 <code>0.0001100110011001100110011001100110011001100110011</code></p>\n<p>Using IEEE754 standard we store this as:</p>\n<pre class=\"astro-code astro-code-themes synthwave-84 dracula\" style=\"background-color:#262335;--shiki-dark-bg:#282A36;color:#bbbbbb;--shiki-dark:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">sign</span><span style=\"color:#FE4450;--shiki-dark:#F8F8F2\"> bit</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\"> : </span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\">0</span></span>\n<span class=\"line\"><span style=\"color:#FE4450;--shiki-dark:#F8F8F2\">exponent</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">: </span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">-</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\">4</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> +</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 1024</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 1019</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 01111111011</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\"> (</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">in</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> binary</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">mantissa</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 1001100110011001100110011001100110011001100110011010</span></span></code></pre>\n<p>The 1024 is added to the exponent. It’s called a biased exponent and helps computers simplify calculations. For why they chose this over two’s complement read <a href=\"https://stackoverflow.com/questions/19864749/why-do-we-bias-the-exponent-of-a-floating-point-number\">ieee 754 - Why do we bias the exponent of a floating-point number? - Stack Overflow</a></p>\n<p>So the <em>IEEE754</em> number interpreted gives\n<code>1.1001100110011001100110011001100110011001100110011010 * 2^-4</code>\nwhich is approximately\n<code>0.1000000000000000055511151231257827021181583404541015625</code></p>\n<p>hence why <strong>0.1+0.2=0.30000000000000004</strong></p>\n<p>If you need to handle floating point arithmetic accurately use libraries like <a href=\"https://github.com/MikeMcl/decimal.js/\">Decimal.js: An arbitrary-precision Decimal type for JavaScript</a></p>\n<h4 id=\"references\">References</h4>\n<hr>\n<p><a href=\"https://www.youtube.com/watch?v=PZRI1IfStY0\">Floating Point Numbers - Computerphile</a><br>\n<a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\">IEEE-754 Floating Point Converter</a><br>\n<a href=\"https://byjus.com/maths/prime-factorization/\">Prime Factorization - Definition, Methods, Examples, Prime Factorize</a><br>\n<a href=\"https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/\">IEEE Standard 754 Floating Point Numbers - GeeksforGeeks</a><br>\n<a href=\"https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF\">IEEE754.PDF</a><br>\n<a href=\"https://www.youtube.com/shorts/RBt2vtcPsC8\">(3) Decimal Fraction to Binary Convert - YouTube</a><br>\n<a href=\"https://stackoverflow.com/questions/19864749/why-do-we-bias-the-exponent-of-a-floating-point-number\">ieee 754 - Why do we bias the exponent of a floating-point number? - Stack Overflow</a></p>",{headings:86,localImagePaths:90,remoteImagePaths:91,frontmatter:92,imagePaths:94},[87],{depth:32,slug:88,text:89},"references","References",[],[],{title:77,description:78,pubDate:93},"Jan 31 2025",[],"node-js-event-loop",{id:95,data:97,body:100,filePath:101,digest:102,rendered:103},{title:98,description:98,pubDate:99},"How the NodeJS event loop works",["Date","2023-10-03T21:00:00.000Z"],"The event loop is the mechanism by which **NodeJs** executes asynchronous tasks. By nature Javascript is single threaded, so any resource intensive tasks like doing math operations or reading from a file would block the main thread. NodeJS works with JS so to get around this limitation, it introduced the Event loop. This is how it works\n\nNodeJS relies on a call stack and some callback queues. The call stack is a space in memory where execution steps in a program are stored and executed. If you had a synchronous program like so\n\n```typescript\nconst x = 1;\nconst y = 3;\nconsole.log(x+y)\n```\n\nThe program will first load *x*,*y* into the callstack then perform the *console.log* and exit the program. If there was a command that does some heavy computation or take time to complete, e.g *fs.readFile()*, node prefers to handle these asynchronously by loading them in a queue and coming back to process them later.\n\nThere are different types of queues that take care of different tasks. Once nodejs pushes commands into queues it will continue processing other requests in the callstack until the callstack is empty, then it checks the queues to see if there is anything that's ready to be processed. The different types of queues are listed below in priority of how they are processed and what they typically handle\n\n**Microtasks Queue** - process.nextTick, Mutation Observer, Promises\n\n**Timer Queue** - setTimeout, setInterval\n\n**I/O Queue** - file system, network events\n\n**Check Queue** - setImmediate calls\n\n**Close Queue** - Close handlers, file, network connection\n\nThe *IO* queue handles IO related things i.e reading files, database connections. These kind of operations are usually offloaded to [Libuv](https://github.com/libuv/libuv) a cross-platform library implemented in C++, that also handles child processes and signals. Libuv maintains about 4 threads that it uses to do IO in a non blocking manner.\n\nAsync workflow example\n\n```typescript\nimport fs from 'fs'\nconst x = 1;\nconst y = 3;\nconst file = fs.readFile('myfile.txt', 'utf8', (err, data) => {\n    // do something with this data\n    // this will not block, it will be pushed to the io queue as another users requests is processed\n});\n```\n\nNodeJS maintains context by wrapping the functions in a closure before sending them to a queue to be processed. That way, it can serve multiple users requests and still maintain this important context to differentiate one user from another.\n\n---\n\n#### References\n\nhttps://www.geeksforgeeks.org/node-js-fs-readfile-method/\nhttps://www.freecodecamp.org/news/nodejs-eventloop-tutorial/<br />\n[diagram 1](https://viewer.diagrams.net/index.html?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&title=Diagrams.drawio#R7VldU%2BM2FP01mdl9gInjfJBHEmhhCoVumGlfZVuONZElryTjZH9975Xkj8RhF6bQbtl9IChX8rV07tG5V8ogXObbXxUpsluZUD4YDZPtILwYjEZBOBzDP7TsnGU2mjnDWrHEmYatYcW%2BUP9kbS1ZQrW3OZORkhtW7BtjKQSNzZ6NKCWr%2FWGp5MmeoSBr2jOsYsL71j9ZYjJnPatXgfYrytZZ%2FeZgOnc9EYk3ayVL4d8npKCuJye1G79GnZFEVh1TeDkIl0pK41r5dkk5wrqP2C9P9DZTVlSY5zxAzHL21%2B9RJLLzYH5WVTP%2BGz%2FxXh4JLz0UD0RvwPJHScEymnLwvYgUtNbY%2BrAknOOi6yEf%2FeLMrsayypihq4LE%2BL0CvsBjmck5fAugSXThIpiyLYWpLfwMqDJ0%2B%2BTSggYw4CCVOTVqB0P8A%2BHEY%2BzpN6q%2FV51gelPWiWNtI54%2B68ZziyM0PJQvgHXUg%2FWWxUruY%2Fv94RZO%2F2Pcwh5uNQUlrylYWzirLVdEJBzkYzS8voMPWVBFDJMCLfR0DZ%2BKkoQJbKXMjnQuYI6tl6%2F5NSynChqwquHF3S36fQSM2xeQJLlEyw3ThgqqXvyGikbopmCNSwCVy9gu5MXecqo1Sh6SQWu3cucV3qNlvKE49ynJkWQi0kXH39GXgLEbgQPqAgPNAVs5Wwtoc5piD7KUgdyee3POkgQfXiiq2RcSWUdD%2BF5IhrCC18liMLlAT6WR2iUMdKyNkhu6BGgUWKzchgsIKj8wvcLuGAfhvqqM%2B7sjDI9sj2D4Vvtj%2FA%2F3R6FkzjTyAogVZ8jsjAobTGJo7ij9LK7dlsZTcygjTdUjcn54fn%2F98s0Fk4qBr6cCWPTA4s2Hjz%2BpeEjF0YFQH0lwo9m%2FqdSTfuGQ0VoX4T%2BXsmhj60TUDjiSCIcRTaWizZCvpsmnAxzDm4GF%2F9MQN0riQxzM%2ByEeD4%2BEOHyrEM96IcbiDywrYwvAw9rQZAzDrEqbePVOxJmSQpY29hBS3YulLZyxmLHR%2BEYBlDAFBRBKTnihZYmYvAbujVjXKj%2Fq4x4cU%2FkmHbw68EFf5i%2F9trqx2%2BpJGINvw%2FgKkDUr95BNgueVjZM3A6yvRvcd4WlqNSYajYkdlTVS%2BRQadyL2AmSFiNhPIbGWctJEkNAtk%2BF82sobujb9DVFbEva4F7Dp51LaDQNSduLV6xw102WodsChI10QcdRTeww9iZ0yndvlMsMIP%2Boyzmi8aVU5R1Wul%2FbZy%2FLBEgvFpGJm14KwbAuIrtAD%2F3L8n0K1Ub%2Bhyd1uDb2UbjH6%2FmEzLjVJ5Snkj8IWMaTRDYtKnDVroQVgtT4pODGQ5BAPziJF7H4yGcFNnbXnjIza6qx7hHknyEU7x5JH5k9iDLN1CjJlqWIR3Tu5EQscNBKWplQ5%2FfMjrAO9g7NW%2Fm4AAhLUxIE6pQAQGFYqNTY52XSXrT0BNbLuGqEp3ebrEA1vDFjK4vdJKHeepYW0Qm5PIpyJcutkaVOLmO3ISSwtpyzG13fL%2B7qnYiKRFaL4TmB5Og39XNoPepQYzyf9o8T82MXFm50lgv5hYgXlgrtASIghtfTlBHCEP5rYdCjLNd5SSKzLsJeSzq2edh6sFEq5YbQuSQBoP8ycxn3WPLi0WxHEjKVOO%2B31BeLBjFMKfH5bKFf7NDccTkESmkPD3ds1ep3UJRNMlqlB565t0Pxy4RZs61AsmsEvdCS6P8fKFamd0qqd5sJmTGaTA2KHKWDVar0fxQSmgeaSRtl5gipqXwp3e%2FvQl%2F7W8MoYPMd%2Fck9CaymF3Te9GTtkYi51aQvmtBSxzzg%2FxB3N5Gxv003DeW%2FTTY%2BdimYv33Pwtf3dyPZ1fpcLL%2F8G#%7B%22pageId%22%3A%22K0AqEqVVdicwrlIVKQc0%22%7D)<br />\n[Visual Guide](https://www.builder.io/blog/visual-guide-to-nodejs-event-loop)","src/content/blog/node-js-event-loop.md","c3455c00fac22a52",{html:104,metadata:105},"<p>The event loop is the mechanism by which <strong>NodeJs</strong> executes asynchronous tasks. By nature Javascript is single threaded, so any resource intensive tasks like doing math operations or reading from a file would block the main thread. NodeJS works with JS so to get around this limitation, it introduced the Event loop. This is how it works</p>\n<p>NodeJS relies on a call stack and some callback queues. The call stack is a space in memory where execution steps in a program are stored and executed. If you had a synchronous program like so</p>\n<pre class=\"astro-code astro-code-themes synthwave-84 dracula\" style=\"background-color:#262335;--shiki-dark-bg:#282A36;color:#bbbbbb;--shiki-dark:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">const</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> x</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 1</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">const</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> y</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 3</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">console</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">.</span><span style=\"color:#36F9F6;--shiki-dark:#50FA7B\">log</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">(</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">x</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">+</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\">y</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">)</span></span></code></pre>\n<p>The program will first load <em>x</em>,<em>y</em> into the callstack then perform the <em>console.log</em> and exit the program. If there was a command that does some heavy computation or take time to complete, e.g <em>fs.readFile()</em>, node prefers to handle these asynchronously by loading them in a queue and coming back to process them later.</p>\n<p>There are different types of queues that take care of different tasks. Once nodejs pushes commands into queues it will continue processing other requests in the callstack until the callstack is empty, then it checks the queues to see if there is anything that’s ready to be processed. The different types of queues are listed below in priority of how they are processed and what they typically handle</p>\n<p><strong>Microtasks Queue</strong> - process.nextTick, Mutation Observer, Promises</p>\n<p><strong>Timer Queue</strong> - setTimeout, setInterval</p>\n<p><strong>I/O Queue</strong> - file system, network events</p>\n<p><strong>Check Queue</strong> - setImmediate calls</p>\n<p><strong>Close Queue</strong> - Close handlers, file, network connection</p>\n<p>The <em>IO</em> queue handles IO related things i.e reading files, database connections. These kind of operations are usually offloaded to <a href=\"https://github.com/libuv/libuv\">Libuv</a> a cross-platform library implemented in C++, that also handles child processes and signals. Libuv maintains about 4 threads that it uses to do IO in a non blocking manner.</p>\n<p>Async workflow example</p>\n<pre class=\"astro-code astro-code-themes synthwave-84 dracula\" style=\"background-color:#262335;--shiki-dark-bg:#282A36;color:#bbbbbb;--shiki-dark:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">import</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> fs</span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\"> from</span><span style=\"color:#FF8B39;--shiki-dark:#E9F284\"> '</span><span style=\"color:#FF8B39;--shiki-dark:#F1FA8C\">fs</span><span style=\"color:#FF8B39;--shiki-dark:#E9F284\">'</span></span>\n<span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">const</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> x</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 1</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">const</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> y</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#F97E72;--shiki-dark:#BD93F9\"> 3</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">const</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> file</span><span style=\"color:#FFFFFFEE;--shiki-dark:#FF79C6\"> =</span><span style=\"color:#FF7EDB;--shiki-dark:#F8F8F2\"> fs</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">.</span><span style=\"color:#36F9F6;--shiki-dark:#50FA7B\">readFile</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">(</span><span style=\"color:#FF8B39;--shiki-dark:#E9F284\">'</span><span style=\"color:#FF8B39;--shiki-dark:#F1FA8C\">myfile.txt</span><span style=\"color:#FF8B39;--shiki-dark:#E9F284\">'</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#FF8B39;--shiki-dark:#E9F284\">'</span><span style=\"color:#FF8B39;--shiki-dark:#F1FA8C\">utf8</span><span style=\"color:#FF8B39;--shiki-dark:#E9F284\">'</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, (</span><span style=\"color:#FF7EDB;font-style:italic;--shiki-dark:#FFB86C;--shiki-dark-font-style:italic\">err</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">, </span><span style=\"color:#FF7EDB;font-style:italic;--shiki-dark:#FFB86C;--shiki-dark-font-style:italic\">data</span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">) </span><span style=\"color:#FEDE5D;--shiki-dark:#FF79C6\">=></span><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#848BBD;font-style:italic;--shiki-dark:#6272A4;--shiki-dark-font-style:inherit\">    // do something with this data</span></span>\n<span class=\"line\"><span style=\"color:#848BBD;font-style:italic;--shiki-dark:#6272A4;--shiki-dark-font-style:inherit\">    // this will not block, it will be pushed to the io queue as another users requests is processed</span></span>\n<span class=\"line\"><span style=\"color:#BBBBBB;--shiki-dark:#F8F8F2\">});</span></span></code></pre>\n<p>NodeJS maintains context by wrapping the functions in a closure before sending them to a queue to be processed. That way, it can serve multiple users requests and still maintain this important context to differentiate one user from another.</p>\n<hr>\n<h4 id=\"references\">References</h4>\n<p><a href=\"https://www.geeksforgeeks.org/node-js-fs-readfile-method/\">https://www.geeksforgeeks.org/node-js-fs-readfile-method/</a>\n<a href=\"https://www.freecodecamp.org/news/nodejs-eventloop-tutorial/\">https://www.freecodecamp.org/news/nodejs-eventloop-tutorial/</a><br>\n<a href=\"https://viewer.diagrams.net/index.html?tags=%7B%7D&#x26;highlight=0000ff&#x26;edit=_blank&#x26;layers=1&#x26;nav=1&#x26;title=Diagrams.drawio#R7VldU%2BM2FP01mdl9gInjfJBHEmhhCoVumGlfZVuONZElryTjZH9975Xkj8RhF6bQbtl9IChX8rV07tG5V8ogXObbXxUpsluZUD4YDZPtILwYjEZBOBzDP7TsnGU2mjnDWrHEmYatYcW%2BUP9kbS1ZQrW3OZORkhtW7BtjKQSNzZ6NKCWr%2FWGp5MmeoSBr2jOsYsL71j9ZYjJnPatXgfYrytZZ%2FeZgOnc9EYk3ayVL4d8npKCuJye1G79GnZFEVh1TeDkIl0pK41r5dkk5wrqP2C9P9DZTVlSY5zxAzHL21%2B9RJLLzYH5WVTP%2BGz%2FxXh4JLz0UD0RvwPJHScEymnLwvYgUtNbY%2BrAknOOi6yEf%2FeLMrsayypihq4LE%2BL0CvsBjmck5fAugSXThIpiyLYWpLfwMqDJ0%2B%2BTSggYw4CCVOTVqB0P8A%2BHEY%2BzpN6q%2FV51gelPWiWNtI54%2B68ZziyM0PJQvgHXUg%2FWWxUruY%2Fv94RZO%2F2Pcwh5uNQUlrylYWzirLVdEJBzkYzS8voMPWVBFDJMCLfR0DZ%2BKkoQJbKXMjnQuYI6tl6%2F5NSynChqwquHF3S36fQSM2xeQJLlEyw3ThgqqXvyGikbopmCNSwCVy9gu5MXecqo1Sh6SQWu3cucV3qNlvKE49ynJkWQi0kXH39GXgLEbgQPqAgPNAVs5Wwtoc5piD7KUgdyee3POkgQfXiiq2RcSWUdD%2BF5IhrCC18liMLlAT6WR2iUMdKyNkhu6BGgUWKzchgsIKj8wvcLuGAfhvqqM%2B7sjDI9sj2D4Vvtj%2FA%2F3R6FkzjTyAogVZ8jsjAobTGJo7ij9LK7dlsZTcygjTdUjcn54fn%2F98s0Fk4qBr6cCWPTA4s2Hjz%2BpeEjF0YFQH0lwo9m%2FqdSTfuGQ0VoX4T%2BXsmhj60TUDjiSCIcRTaWizZCvpsmnAxzDm4GF%2F9MQN0riQxzM%2ByEeD4%2BEOHyrEM96IcbiDywrYwvAw9rQZAzDrEqbePVOxJmSQpY29hBS3YulLZyxmLHR%2BEYBlDAFBRBKTnihZYmYvAbujVjXKj%2Fq4x4cU%2FkmHbw68EFf5i%2F9trqx2%2BpJGINvw%2FgKkDUr95BNgueVjZM3A6yvRvcd4WlqNSYajYkdlTVS%2BRQadyL2AmSFiNhPIbGWctJEkNAtk%2BF82sobujb9DVFbEva4F7Dp51LaDQNSduLV6xw102WodsChI10QcdRTeww9iZ0yndvlMsMIP%2Boyzmi8aVU5R1Wul%2FbZy%2FLBEgvFpGJm14KwbAuIrtAD%2F3L8n0K1Ub%2Bhyd1uDb2UbjH6%2FmEzLjVJ5Snkj8IWMaTRDYtKnDVroQVgtT4pODGQ5BAPziJF7H4yGcFNnbXnjIza6qx7hHknyEU7x5JH5k9iDLN1CjJlqWIR3Tu5EQscNBKWplQ5%2FfMjrAO9g7NW%2Fm4AAhLUxIE6pQAQGFYqNTY52XSXrT0BNbLuGqEp3ebrEA1vDFjK4vdJKHeepYW0Qm5PIpyJcutkaVOLmO3ISSwtpyzG13fL%2B7qnYiKRFaL4TmB5Og39XNoPepQYzyf9o8T82MXFm50lgv5hYgXlgrtASIghtfTlBHCEP5rYdCjLNd5SSKzLsJeSzq2edh6sFEq5YbQuSQBoP8ycxn3WPLi0WxHEjKVOO%2B31BeLBjFMKfH5bKFf7NDccTkESmkPD3ds1ep3UJRNMlqlB565t0Pxy4RZs61AsmsEvdCS6P8fKFamd0qqd5sJmTGaTA2KHKWDVar0fxQSmgeaSRtl5gipqXwp3e%2FvQl%2F7W8MoYPMd%2Fck9CaymF3Te9GTtkYi51aQvmtBSxzzg%2FxB3N5Gxv003DeW%2FTTY%2BdimYv33Pwtf3dyPZ1fpcLL%2F8G#%7B%22pageId%22%3A%22K0AqEqVVdicwrlIVKQc0%22%7D\">diagram 1</a><br>\n<a href=\"https://www.builder.io/blog/visual-guide-to-nodejs-event-loop\">Visual Guide</a></p>",{headings:106,localImagePaths:108,remoteImagePaths:109,frontmatter:110,imagePaths:112},[107],{depth:32,slug:88,text:89},[],[],{title:98,description:98,pubDate:111},"Oct 4 2023",[]];

export { _astro_dataLayerContent as default };
