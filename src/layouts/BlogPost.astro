---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";

type Props = CollectionEntry<"blog">["data"] & {
  hash: string;
  likes: number;
  reads: number;
};
const { title, description, pubDate, updatedDate, likes, reads, hash } =
  Astro.props;
---

<html lang="en">
  <head>
    <script
      src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"
    ></script>
    <BaseHead title={title} description={description} />
    <style>
      /* From Uiverse.io by vinodjangid07 */
      .Btn {
        height: 25px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border: none;
        border-radius: 5px;
        overflow: hidden;
        box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.089);
        cursor: pointer;
        background-color: transparent;
        padding: 0px;
      }

      .leftContainer {
        height: 100%;
        background-color: rgb(238, 0, 0);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        gap: 8px;
      }

      .leftContainer .like {
        color: white;
        font-weight: 600;
      }

      .count {
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        position: relative;
        background-color: white;
        padding: 5px;
        color: rgb(238, 0, 0);
      }

      .Btn:hover .leftContainer {
        background-color: rgb(219, 0, 0);
      }

      .Btn:active .leftContainer {
        background-color: rgb(201, 0, 0);
      }

      .Btn:active .leftContainer svg {
        transform: scale(1.15);
        transform-origin: top;
      }

      div#like-container {
        display: flex;
        align-items: center;
        justify-content: center;
      }

      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }

      .hero-image {
        width: 100%;
      }

      .hero-image img {
        display: block;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }

      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }

      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }

      .title h1 {
        margin: 0 0 0.5em 0;
      }

      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }

      .last-updated-on {
        font-style: italic;
      }

      /* ---------------------------------------------------------- */
      /*                Snippflow Reading Progress Bar              */
      /* ---------------------------------------------------------- */
      #sf-reading-progress-bar {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
        width: 0%;
        height: 5px;
        background-color: #46a787;
        margin: 0;
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <h2>{title}</h2>
            <div id="like-container">
              <button class="Btn">
                <span class="leftContainer" id="increaseCount">
                  <svg
                    fill="white"
                    viewBox="0 0 512 512"
                    height="1em"
                    xmlns="http://www.w3.org/2000/svg"
                    ><path
                      d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"
                    ></path></svg
                  >
                  <span class="like">Like</span>
                </span>
                <span class="count" id="like-count">
                  {`${likes} likes`}
                </span>
                <span class="count" id="read-count">
                  {`${reads} reads`}
                </span>
              </button>
            </div>
          </div>
          <hr />
        </div>
        <div id="sf-reading-progress-bar"></div>
        <slot />
      </article>
    </main>

    <div
      id="data-container"
      data-likes={likes}
      data-reads={reads}
      data-hash={hash}
    >
    </div>
    <Footer />

    <script>
      import { actions } from "astro:actions";
      const dataContainer = document.getElementById("data-container");
      const articleLikes = dataContainer?.dataset.likes;
      const articleReads = dataContainer?.dataset.reads;
      const articleHash = dataContainer?.dataset.hash;

      const likes = articleLikes ? Number(articleLikes) : 0;
      const reads = articleReads ? Number(articleReads) : 0;
      const hash = articleHash ? articleHash : "";

      const increaseCountButton = document.querySelector("span#increaseCount");

      const likeCountContainer = document.getElementById("like-count");
      const readCountContainer = document.getElementById("read-count");

      increaseCountButton?.addEventListener("click", async () => {
        const { data, error } = await actions.likePost({
          hash,
        });

        if (data && likeCountContainer) {
          likeCountContainer.innerHTML = `${likes + 1} likes`;
        }
      });

      setTimeout(async () => {
        const { data, error } = await actions.updatePostVisits({
          hash,
        });
      }, 1000 * 20);

      document.addEventListener("DOMContentLoaded", () => {
        console.log("DOM content loaded");
        const progressBar = document.getElementById("sf-reading-progress-bar");
        if (progressBar) {
          let confettiTriggered = false;
          window.addEventListener("scroll", () => {
            const scrollTop =
              document.documentElement.scrollTop || document.body.scrollTop;
            const footerHeight =
              document.querySelector("footer")?.clientHeight ?? 0;
            const scrollHeight =
              document.documentElement.scrollHeight -
              (document.documentElement.clientHeight + footerHeight);
            const scrollPercentage = (scrollTop / scrollHeight) * 100;
            progressBar.style.width = `${scrollPercentage}%`;
            if (scrollPercentage >= 96 && !confettiTriggered) {
              confettiTriggered = true;
              confetti({
                particleCount: 100,
                spread: 70,
                origin: { y: 0.5 },
              });
            }
          });
        }
      });
    </script>
  </body>
</html>
